<style>
  table#cal tr.days td {
    width: 22px;
    text-align: center;
    font-weight: bold;
    padding: 0;
  }

  table#cal td.wday {
    text-align: center;
    color: gray;
    font-size: 6pt;
    width: 16px;
    max-width: 16px;
  }

  td.weekend {
    border: solid 1px #888888;
/*    background-color: #ffcccc !important;*/
    background-image: url(/images/ffcccc.png);
  }

  table#cal {
    border: solid 2px black;
    margin-bottom: 0;
  }

  table#cal thead td {
    background-color: white !important;
  }

  table#cal thead td.weekend {
    background-color: #ffcccc !important;
  }

  td.rb { border-right:  solid 2px black }
  td.bb, tr.bb { border-bottom: solid 2px black }

  table#cal td.selected {
    background: url(/images/smiley-eek.png) no-repeat center;
  }

  table#cal td.weekend.selected {
    border: solid 1px #888888;
    background: url(/images/smiley-eek-ffcccc.png) no-repeat center;
  }

  tbody#cal_tbody td { cursor: pointer }

  td.vacation {
    text-align: center;
    color: grey;
    background-color: lightgrey;
  }

  table.notable, table.notable > tbody > tr > td {
    padding: 0;
    margin:  0;
  }

  table.notable caption {
    font-weight: bold;
  }

  b.dayscount {
    display: block;
    text-align: right;
    position: absolute;
    font-weight: normal;
    color: #bbb;
    font-size: 7pt;
  }

  @media screen {
    table#cal td.today {
      border-left: solid 2px black;
      border-right: solid 2px black;
    }
  }

  @media print {
    table#cal {
      border: solid 3px black;
    }
    td.bb, tr.bb { border-bottom: solid 3px black }
    td.username {
      font-size: 105%;
      padding: 1 8 1 8;
    }
    b.dayscount {
      display: none;
    }
  }
</style>

<%= calendar_date_select_includes %>


<table class="notable">
  <caption>
    График ночных дежурств на <%=month_name(@month)-%> <%=@year-%>
  </caption>
  <tr>
    <td rowspan="2">
      <%= link_to_prev_month %>
    </td>
    <td colspan="2">
      <table id="cal" class="t1">
        <thead>
          <tr class="days" id="days-row">
            <td class="rb"></td>
            <% (@start_date..@end_date).each do |date| %>
              <%- wday_td(date) do -%>
                <%= date.day -%>
              <%- end -%>
            <% end %>
          </tr>
          <tr class="days bb">
            <td class="rb bb"></td>
            <% (@start_date..@end_date).each do |date| %>
              <%- wday_td(date, 'bb') do -%>
                <%= wday_shortname(date) -%>
              <%- end -%>
            <% end %>
          </tr>
        </thead>
        <tbody id="cal_tbody">
          <% @users.each do |user| %>
            <tr class="user-row" id="tr-u-<%=user.id-%>">
              <td class="rb username"><%=link_to_user(user)%></td>
              <% (@start_date..@end_date).each do |date| %>
                <%- if @vacations_by_user_id[user.id] && (vacation = @vacations_by_user_id[user.id].find{|v| v.include?(date) }) -%>
                  <%= draw_vacation(vacation, date) -%>
                <%- else -%>
                  <%= wday_td(date, (@nights[date] == user.id ? 'wday selected' : 'wday')) -%>
                <%- end -%>
              <% end %>
            </tr>
          <% end %>
        </tbody>
      </table>
    </td>
    <td rowspan="2" style="padding-left: 1em">
      <%= link_to_next_month %>
    </td>
  </tr>
  <tr>
    <td style="padding-left: 1.2em" align="right">
      <span id="status-info" style="padding:2 4 2 4"></span>
    </td>
    <td align="right" width="110">
      <%= button_to_function('Сохранить', 'save()', :class => 'noprint') unless (params[:print] || @readonly) %>
    </td>
  </tr>
</table>

<% unless params[:print] || @readonly %>

<ul class="actions">
  <li><%= link_to_function "» добавить отпуск" do |page|
            page.visual_effect :toggle_blind, :vacation_form, :duration => 0.2
          end %>
    <% form_tag( {:action => 'add_vacation'},
        :id => 'vacation_form',
        :style => 'display:none; margin: 5px 0 0 18px'
       ) do %>
        <%= select_tag 'user_id', options_for_select(@users.sort_by(&:name).map{ |u| [u.name,u.id] }) %>
        <%= calendar_date_select_tag "start_date", nil, :size => 10 %>
        <%= calendar_date_select_tag "end_date",   nil, :size => 10 %>
        <%= submit_tag 'Добавить', :name => nil %>
        <p class="clear"></p>
    <% end %>

  <!--li<%= link_to '» печать', :year => @year, :month => @month, :print => 1 %>-->
</ul>


<!-- hidden form for submitting params changes -->
<% form_remote_tag(
    :html   => {:id => 'params_form', :style => 'display:none'},
    :url    => { :action => 'save_param' },
    :update => 'remote-form-result'
) do %>
  <%= hidden_field_tag 'year', @year %>
  <%= hidden_field_tag 'month', @month %>
  <%= text_field_tag 'order', nil, :id => 'param_order' %>
  <%= text_field_tag 'nights', nil, :id => 'param_nights' %>
  <div id="remote-form-result"></div>
<% end %>
<!-- end of hidden form -->

<%= javascript_tag <<-EOJS
  Sortable.create("cal_tbody", {tag:"tr", ghosting:true, handle:"username"});

  // handle clicking on days
  Event.observe('cal','click',function(ev){
    var td = ev.element();
    if( td.tagName != 'TD' || !td.hasClassName('wday') ) return;
    if( td.hasClassName('selected') ){
      td.removeClassName('selected');
    } else {
      td.addClassName('selected');
      if(td.previousElementSibling){
        td.previousElementSibling.removeClassName('selected');
      }
      if(td.nextElementSibling){
        td.nextElementSibling.removeClassName('selected');
      }
      checkCol(td);
    }
    handle_mouseover(ev);
    recountWorkCounts();
  });

  var prev_col;

  // handle mouseover of days
  Event.observe('cal_tbody','mouseover', handle_mouseover);

  function handle_mouseover(ev){
    var el = ev.target;
    if( !el || !el.hasClassName('wday') ) return;
    if( prev_col ) prev_col.each(function(t){ t.innerHTML = '' });
    if( el.hasClassName('selected') ) return;

    var col = columnOf(el);

    if( col.any(function(el){ return el.hasClassName('selected') })) return;

    prev_col = col;

    col.each(function(el){
      if( el.hasClassName('selected')) return;
      if( el.parentNode.hasClassName('noprint') && !prev_month_last[td2uid(el)]) return;
      var db = daysBefore(el);
      var da = daysAfter(el);
      if( da === false && db === false ) return;

      var dmin = (da===false) ? db : ((db===false) ? da : Math.min(da,db));
      var html = '';

      el.style.fontWeight = '';

      if( dmin <= 2)
        el.style.color = 'red';
      else if( dmin >= 4 ) {
        el.style.color = 'green';
        el.style.fontWeight = 'bold';
      } else
        el.style.color = 'gray'

      if( db === false || (da !== false && da < db )){
        html += da + '»';
        el.style.textAlign = 'right';
      } else if( da === false || db < da){
        html += '«' + db;
        el.style.textAlign = 'left';
      } else {
        html += da;
        el.style.textAlign = 'center';
      }

      el.innerHTML = html;
    });
  }

  function columnOf(el){
    var klass = el.classNames().find(function(x){ if(x.length>3 && x.substr(0,3)=='day') return true })
    return klass ? $$('.' + klass) : [];
  }

  var prev_month_last = #{@prev_month_last.to_json};

  function daysBefore(td){
    var r = 0, el = td;
    while( (el = el.previousElementSibling) && !el.hasClassName('selected') ) r += 1;
    if(el) return r;
    //console.log( td2day(td) + prev_month_last[td2uid(td)]);
    return (prev_month_last[td2uid(td)] || 11) + r - 2;
  }

  function daysAfter(el){
    var r = 0;
    while( (el = el.nextElementSibling) && !el.hasClassName('selected') ) r += 1;
    return el ? r : false;
  }

  // checks the table column to have the only _one_ instance of selected cell
  function checkCol(td){
    var ci       = td.cellIndex;
    var ri       = td.parentNode.rowIndex;
    var tbody    = td.parentNode.parentNode;
    var tbody_cl = tbody.children.length;
    for(var i=0; i<tbody_cl; i++){
      var tr = tbody.children[i];
      if( tr.rowIndex == ri ) continue;
      if( tr.children[ci] ){
        tr.children[ci].removeClassName('selected');
      }
    }
  }

  function td2day(td){
    return parseInt($('days-row').cells[td.cellIndex].textContent);
  }

  function save(){
    var order  = [];
    $$('table#cal tr.user-row').each(function(tr){
      order.push(tr.id.replace('tr-u-',''));
    });
    $('param_order').value = order;

    var nights = [];
    $$('table#cal td.wday.selected').each(function(td){
      nights[ td2day(td) ] = td2uid(td);
    });
    $('param_nights').value = nights;

    $('params_form').onsubmit();

    setnoprint();
  }

EOJS
%>
<% end %>

<%= javascript_tag <<-EOJS
  #{handle_ctrl_arrows}

  Event.observe(window,'load',setnoprint);
  Event.observe(window,'load',recountWorkCounts);

  function td2uid(td){
    return parseInt(td.parentNode.id.replace('tr-u-',''));
  }

  function tr2uid(tr){
    return parseInt(tr.id.replace('tr-u-',''));
  }


  function recountWorkCounts(){
    var counts = {};
    var c;
    var uid;

    // initialize counts
    $$('tr.user-row').each(function(tr){
      counts[ tr2uid(tr) ] = 0;
    });

    // count each user selected days
    $$('td.selected').each(function(td){
      counts[ td2uid(td) ]++;
    });

    // output results
    $$('tr.user-row').each(function(tr){
      c = counts[ (uid=tr2uid(tr)) ];
      if( !$('cnt' + uid) ){
        var el = document.createElement('b');
        el.className = 'dayscount';
        el.id = 'cnt' + uid;
        el.style.top  = tr.offsetTop + 3;
        el.style.left = tr.offsetLeft + tr.clientWidth + 6;
        document.body.appendChild(el);
      }
      $('cnt' + uid).innerHTML = (c > 0 ? c : '');
    });
  }


  function setnoprint(){
    $$('tr.user-row').each(function(tr){
      if( $$('tr#' + tr.id + ' td.selected').length > 0 ){
        tr.removeClassName('noprint');
      } else {
        tr.addClassName('noprint');
      }
    });
  }

EOJS
%>

