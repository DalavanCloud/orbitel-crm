# "тестовый" виртуальный биллинг
class Billing::Test < Billing

  STREETS = %w'Аргентовского Бажова Блюхера Больничная Бурова-Петрова Васильева Войкова Володарского Галкинская Гоголя Дзержинского Заводская Загородная Зорге Интернациональная Ипподромная Карельцева Карла Кирова Климова Коли Комсомольская Кравченко Красина Красномаячная Кремлева Криволапова Куйбышева Куртамышская Ленина Линейная Максима Машиностроителей Менделеева Невежина Некрасова Односторонка Омская Орлова Пичугина Победы Пролетарская Проходная Пушкина Радионова Рихарда Савельева Свердлова Советская Станционная Сухэ-Батора Тобольная Товарная Томина Уральская Урицкого Химмашевская Югова'

  NAMES = {
    :male => [
      %w"Асташов Баженов Барсуков Белобородов Боронко Виноградов Гамин Грибанов Дементьев Дерябин Доронин Евстегнеев Ежов Ефремов Заикин Иванов Карпов Качаев Ковалев Комогоров Кондрашин Коростелев Куманёв Найданов Окунев Петров Плеханов Пономарев Предеин Редкий Сабиров Сидоров Сулима Таах Тимофеев Ткач Трубкин Черемных Чучва Шведов Шкляр Юрин",
      %w'Александр Алексей Анатолий Андрей Антон Вадим Виктор Виталий Владимир Всеволод Дмитрий Евгений Игорь Илья Константин Леонид Николай Олег Павел Руслан Сергей Станислав Тимур Эдуард Юрий',
      %w'Александрович Анатольевич Андреевич Борисович Валерьевич Викторович Владимирович Геннадьевич Иванович Игоревич Михайлович Николаевич Олегович Павлович Петрович Рашидович Сергеевич Степанович Юрьевич'
    ], :female => [
      %w"Архипова Барсукова Боронко Генералова Дубровина Ефимова Завьялова Иванова Кочурова Макарова Мокеева Николаева Петрова Платонова Сесюнина Сидорова Сулима Таах Ткач Черемных Черноусова Чучва Шкляр",
      %w'Анна Антонина Валентина Екатерина Елена Ирина Людмила Мария Ольга Светлана Татьяна',
      %w'Александровна Анатольевна Вадимовна Валерьевна Викторовна Владимировна Ивановна Николаевна Петровна Юрьевна'
    ]
  }

  DATA_FILE = Rails.root + 'tmp/billing_test_data.yml'

  class << self

    def fetch_users
      prepare_data
      @data
    end

    def user_info uid
      prepare_data
      @data[uid] || {}
    end

    def generate_test_data
      @data = (0..101).map{ |i| generate_test_user(i+1) }
      DATA_FILE.open 'w' do |f|
        f << @data.to_yaml
      end
      @data
    end

    private

    def prepare_data
      if !@data || @data.empty?
        @data = YAML::load(DATA_FILE.read) rescue nil
        @data ||= generate_test_data
      end
    end

    def generate_name
      sex = rand(100) < 26 ? :female : :male
      names = NAMES[sex].map(&:rand).join(' ')
    end

    def generate_test_user uid
      bal = (rand(200000)-100000) / 100.0
      bw  = rand(10)+1
      {
        :user_id     => uid,
        :lic_schet   => rand(99999999),
        :bal         => bal,
        :bal_red     => bal <= 0,
        :name        => generate_name,
        :address     => "#{STREETS.rand} #{rand(200)+1}-#{rand(100)+1}",
        :bandwidth   => bw*1024,
        :tarif       => "Безлимитный-#{bw}М",
        :tarif_change_date => (Date.today - rand(100).days),
        :traf_report => {},
        :status => {
          "192.168.#{rand(256)}.#{rand(256)}" => {
            :name => (bal <= 0) ? 'Выключен' : 'Включен',
            :red  => (bal <= 0)
          }
        }
      }
    end
  end
end
